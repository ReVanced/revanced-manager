name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev

jobs:
  release:
    name: Release
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle
        uses: burrunan/gradle-cache-action@v1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          fingerprint: ${{ vars.GPG_FINGERPRINT }}

      - name: Setup keystore
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > "app/keystore.jks"

      - name: Semantic Release (API)
        run: npx multi-semantic-release --tag-format 'api@${version}' --ignore-packages app
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set latest App tag (before the new release)
        id: before
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 --match 'v[0-9]*' $(git rev-parse HEAD))
          echo "LATEST_TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Semantic Release (App)
        run: npx multi-semantic-release --tag-format 'v${version}' --ignore-packages api
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYSTORE_ENTRY_ALIAS: ${{ secrets.KEYSTORE_ENTRY_ALIAS }}
          KEYSTORE_ENTRY_PASSWORD: ${{ secrets.KEYSTORE_ENTRY_PASSWORD }}

      - name: Set latest App tag (after the new release)
        id: after
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 --match 'v[0-9]*' $(git rev-parse HEAD))
          echo "LATEST_TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Attest
        if: steps.before.outputs.LATEST_TAG != steps.after.outputs.LATEST_TAG
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: 'ReVanced Manager ${{ steps.after.outputs.LATEST_TAG }}'
          subject-path: app/build/outputs/apk/release/revanced-manager*.apk
